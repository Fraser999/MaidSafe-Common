/* Copyright 2009 MaidSafe.net limited

This MaidSafe Software is licensed under the MaidSafe.net Commercial License, version 1.0 or later,
and The General Public License (GPL), version 3. By contributing code to this project You agree to
the terms laid out in the MaidSafe Contributor Agreement, version 1.0, found in the root directory
of this project at LICENSE, COPYING and CONTRIBUTOR respectively and also available at:

http://www.novinet.com/license

Unless required by applicable law or agreed to in writing, software distributed under the License is
distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
implied. See the License for the specific language governing permissions and limitations under the
License.
*/

#include <algorithm>
#include <vector>
#include <typeinfo>
#include <iostream>  // NOLINT
#include "gtest/gtest.h"

/*
 * This file tests the operations available on compilers used in the project
 * at the moment they work with gcc 4.5 and MSVC-10
 */

namespace maidsafe {

namespace test {

TEST(cplusplus, DISABLED_BEH_BASE_static_assert) {
// well enable this to check your compiler fails on a static assert
// good reason we cannot leave this uncommented.

// uncomment line below to test
// static_assert ((sizeof(bool) > 800), "I need this to be bigger");
}

TEST(cplusplus, BEH_BASE_auto) {
  auto x = 7;
  ASSERT_EQ(x, 7);
  ASSERT_EQ(typeid(int), typeid(7));  // NOLINT
  std::vector<int> v;
  v.push_back(50);
  v.push_back(-10);
  v.push_back(20);
  v.push_back(-30);
  std::vector<int> p;
  p.push_back(51);
  p.push_back(-9);
  p.push_back(21);
  p.push_back(-29);
  for (auto it = v.begin(); it != v.end(); ++it)
  *it = *it+1;
  ASSERT_EQ(v, p);
}
// gcc 4.5
TEST(cplusplus, DISABLED_BEH_BASE_decltype) {
//  int i = 7;
//  static const decltype(i++) j = 4;
//  ASSERT_EQ(7, i); //decltype has own scope so i unchanged
//  ASSERT_EQ(sizeof(int), sizeof(j));
//  ASSERT_EQ(4, j);
//  int& p = i;
//  ASSERT_EQ(p, 7);
//  // references are ignored
//  ASSERT_NE(typeid(&p), typeid(i));
//  ASSERT_EQ(typeid(p), typeid(i));
//
//  const int k = 1;
//  decltype(k) d = 1;
//  ASSERT_EQ(typeid(d), typeid(const int));
//
//  decltype(j)&  var1 = i;
//  ASSERT_EQ(typeid(j), typeid(i)); // ignores references
//  ASSERT_EQ(typeid(j), typeid(int));
//  // const int, the redundant const qualifier is ignored
// const decltype(k) var2 = 1;
//    ASSERT_EQ(typeid(var2), typeid(const int));
}

TEST(cplusplus, DISABLED_BEH_BASE_lambda) {
//  std::vector<int> v;
//  v.push_back(50);
//  v.push_back(-10);
//  v.push_back(20);
//  v.push_back(-30);
//  std::vector<int> q;
//  q.push_back(-10);
//  q.push_back(20);
//  q.push_back(-30);
//  q.push_back(50);
//  std::sort(v.begin(), v.end(), [](int a, int b) { return abs(a)<abs(b); });
//  ASSERT_EQ(v, q);
}


// gcc 4.6
TEST(cplusplus, DISABLED_BEH_BASE_rangeBasedFor) {
//  int my_array[5] = {1, 2, 3, 4, 5};
//  for (int &x: my_array) {
//    x *= 2;
//  }
//
}

TEST(cplusplus, DISABLED_BEH_BASE_localAndUnamedTemplteArgs) {
// template< typename First, typename Second, int third>
// class SomeType;
//
// template< typename Second>
// using TypedefName = SomeType<OtherType, Second, 5>;
}




}  // namespace test

}  // namespace maidsafe
